import Head from "next/head";
import { Inter } from "@next/font/google";
import { Button, Input } from "@supabase/ui";
import { ChangeEvent, useState } from "react";
import { createBrowserSupabaseClient } from "@supabase/auth-helpers-nextjs";
import { Database } from "@/types/supabase";
import generateRandomSlug from "@/lib/generateRandomSlug";
import { useNotification } from "@/context/notification";

const inter = Inter({ subsets: ["latin"] });

// <Input copy value={} />
const className =
  `${inter.className} min-w-full flex justify-center items-center min-h-[100vh]`;

const isUrl = (url: string) =>
  /^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$/
    .test(url);

export default function Home() {
  const supabase = createBrowserSupabaseClient<Database>();
  const [url, setUrl] = useState("");
  const [vanity, setVanity] = useState("");
  const { showNotification } = useNotification();
  const [data, setData] = useState<any>(null);
  const origin = typeof window !== "undefined" && window.location.origin
    ? window.location.origin
    : "";
  const [errors, setErrors] = useState<Record<string, string>>({
    url: "",
    vanity: "",
  });

  const handleURL = (e: ChangeEvent<HTMLInputElement>) => {
    setErrors({
      ...errors,
      url: "",
    });
    setUrl(e.target.value);
  };

  const handleVanity = (e: ChangeEvent<HTMLInputElement>) => {
    setErrors({
      ...errors,
      vanity: "",
    });
    setVanity(e.target.value);
  };

  const createLink = async () => {
    if (!url) {
      setErrors({
        ...errors,
        url: "URL must not be empty",
      });
      return;
    }

    if (!isUrl(url)) {
      setErrors({
        ...errors,
        url: "Invalid URL",
      });
      return;
    }

    const { data, error } = await supabase.from("links")
      .insert({
        link: url,
        slug: vanity ? vanity : generateRandomSlug(),
      })
      .select("*")
      .single();

    if (error) {
      const message = error.code === "23505"
        ? `Vanity "${vanity}" is already been taken, please try another one.`
        : "Something went wrong while creating your link, please try again later.";

      showNotification({
        title: "Error",
        message,
        variant: "danger",
      });

      return;
    } else if (data) {
      navigator.clipboard.writeText(`${origin}/${data.slug}`);
      setData(data);
      showNotification({
        title: "Success",
        message: "Your shortened link has been copied to your clipboard.",
      });
    } else {
      showNotification({
        title: "Error",
        variant: "danger",
        message: "Something went wrong in our server, please try again later.",
      });
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={className}>
        <div className="flex flex-col gap-5 w-[480px]">
          <div className="flex flex-col">
            <label htmlFor="url" className="select-none">
              URL
              <span className="text-red-400">
                *
              </span>
            </label>
            <Input
              onChange={handleURL}
              id="url"
              className="text-white"
              error={errors.url && errors.url}
            />
          </div>
          <div className="flex flex-col">
            <label htmlFor="vanity" className="select-none">
              Vanity{" "}
              <span className="text-sm text-zinc-400">
                (skip this for a randomized vanity)
              </span>
            </label>
            <Input
              onChange={handleVanity}
              id="vanity"
              className="text-white"
              error={errors.vanity && errors.vanity}
            />
          </div>
          <div className="flex justify-end">
            <Button onClick={createLink} size="medium">
              Create Shortened URL
            </Button>
          </div>

          {data?.slug && (
            <Input
              className="mt-20"
              readOnly
              aria-readonly
              value={`${origin}/${data.slug}`}
              copy
            />
          )}
        </div>
      </main>
    </>
  );
}
